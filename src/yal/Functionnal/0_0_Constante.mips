.data
 finLigne:   .asciiz "\n"
vrai:	.asciiz "vrai"
faux:	.asciiz "faux"
error_div:	.asciiz "Erreur: Division par 0 !"
error_returnFonction:	.asciiz "Erreur: le type de retour de la fonction doit etre entier !"
error_indexTableau:	.asciiz "Erreur: index tableau superieur ou negatif !"
error_affectation_tableau:	.asciiz "Erreur: probleme d'affectation tableau !"

.text
 main :
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $s7, 0($sp)
	addi $sp, $sp, -4
	li $v0, 0
	sw $v0, ($sp)
	addi $sp, $sp, -4
	move $s7, $sp
	addi $sp, $sp, -44
	li $v0,1

move $t5, $v0
	li $v0,0

# verifier l'indice 0
	bgez $v0, cmpt19
	li $v0, 4
	la $a0, error_indexTableau
	syscall
	j end
cmpt19: # tab est un tableau statique on recupere sa taille dans la TDS
	slti $t2, $v0, 10
	beq $t2, 1, cmpt20
	li $v0, 4
	la $a0, error_indexTableau
	syscall
	j end
cmpt20: # charger la valeur tab[0] du bloc 0
	la $t6, 0($s7)
	li $t2, 4
	mult $v0, $t2
	mflo $v0
	sub $t6, $t6, $v0
	sw $t5, 0($t6)
	li $v0,48

move $t5, $v0
	li $v0,1

# verifier l'indice 1
	bgez $v0, cmpt22
	li $v0, 4
	la $a0, error_indexTableau
	syscall
	j end
cmpt22: # tab est un tableau statique on recupere sa taille dans la TDS
	slti $t2, $v0, 10
	beq $t2, 1, cmpt23
	li $v0, 4
	la $a0, error_indexTableau
	syscall
	j end
cmpt23: # charger la valeur tab[1] du bloc 0
	la $t6, 0($s7)
	li $t2, 4
	mult $v0, $t2
	mflo $v0
	sub $t6, $t6, $v0
	sw $t5, 0($t6)
	li $v0,73

move $t5, $v0
	li $v0,2

# verifier l'indice 2
	bgez $v0, cmpt25
	li $v0, 4
	la $a0, error_indexTableau
	syscall
	j end
cmpt25: # tab est un tableau statique on recupere sa taille dans la TDS
	slti $t2, $v0, 10
	beq $t2, 1, cmpt26
	li $v0, 4
	la $a0, error_indexTableau
	syscall
	j end
cmpt26: # charger la valeur tab[2] du bloc 0
	la $t6, 0($s7)
	li $t2, 4
	mult $v0, $t2
	mflo $v0
	sub $t6, $t6, $v0
	sw $t5, 0($t6)
	li $v0,12

move $t5, $v0
	li $v0,3

# verifier l'indice 3
	bgez $v0, cmpt28
	li $v0, 4
	la $a0, error_indexTableau
	syscall
	j end
cmpt28: # tab est un tableau statique on recupere sa taille dans la TDS
	slti $t2, $v0, 10
	beq $t2, 1, cmpt29
	li $v0, 4
	la $a0, error_indexTableau
	syscall
	j end
cmpt29: # charger la valeur tab[3] du bloc 0
	la $t6, 0($s7)
	li $t2, 4
	mult $v0, $t2
	mflo $v0
	sub $t6, $t6, $v0
	sw $t5, 0($t6)
	li $v0,90

move $t5, $v0
	li $v0,4

# verifier l'indice 4
	bgez $v0, cmpt31
	li $v0, 4
	la $a0, error_indexTableau
	syscall
	j end
cmpt31: # tab est un tableau statique on recupere sa taille dans la TDS
	slti $t2, $v0, 10
	beq $t2, 1, cmpt32
	li $v0, 4
	la $a0, error_indexTableau
	syscall
	j end
cmpt32: # charger la valeur tab[4] du bloc 0
	la $t6, 0($s7)
	li $t2, 4
	mult $v0, $t2
	mflo $v0
	sub $t6, $t6, $v0
	sw $t5, 0($t6)
	li $v0,5

move $t5, $v0
	li $v0,5

# verifier l'indice 5
	bgez $v0, cmpt34
	li $v0, 4
	la $a0, error_indexTableau
	syscall
	j end
cmpt34: # tab est un tableau statique on recupere sa taille dans la TDS
	slti $t2, $v0, 10
	beq $t2, 1, cmpt35
	li $v0, 4
	la $a0, error_indexTableau
	syscall
	j end
cmpt35: # charger la valeur tab[5] du bloc 0
	la $t6, 0($s7)
	li $t2, 4
	mult $v0, $t2
	mflo $v0
	sub $t6, $t6, $v0
	sw $t5, 0($t6)
	li $v0,2345

move $t5, $v0
	li $v0,6

# verifier l'indice 6
	bgez $v0, cmpt37
	li $v0, 4
	la $a0, error_indexTableau
	syscall
	j end
cmpt37: # tab est un tableau statique on recupere sa taille dans la TDS
	slti $t2, $v0, 10
	beq $t2, 1, cmpt38
	li $v0, 4
	la $a0, error_indexTableau
	syscall
	j end
cmpt38: # charger la valeur tab[6] du bloc 0
	la $t6, 0($s7)
	li $t2, 4
	mult $v0, $t2
	mflo $v0
	sub $t6, $t6, $v0
	sw $t5, 0($t6)
	li $v0,3

move $t5, $v0
	li $v0,7

# verifier l'indice 7
	bgez $v0, cmpt40
	li $v0, 4
	la $a0, error_indexTableau
	syscall
	j end
cmpt40: # tab est un tableau statique on recupere sa taille dans la TDS
	slti $t2, $v0, 10
	beq $t2, 1, cmpt41
	li $v0, 4
	la $a0, error_indexTableau
	syscall
	j end
cmpt41: # charger la valeur tab[7] du bloc 0
	la $t6, 0($s7)
	li $t2, 4
	mult $v0, $t2
	mflo $v0
	sub $t6, $t6, $v0
	sw $t5, 0($t6)
	li $v0,5

move $t5, $v0
	li $v0,8

# verifier l'indice 8
	bgez $v0, cmpt43
	li $v0, 4
	la $a0, error_indexTableau
	syscall
	j end
cmpt43: # tab est un tableau statique on recupere sa taille dans la TDS
	slti $t2, $v0, 10
	beq $t2, 1, cmpt44
	li $v0, 4
	la $a0, error_indexTableau
	syscall
	j end
cmpt44: # charger la valeur tab[8] du bloc 0
	la $t6, 0($s7)
	li $t2, 4
	mult $v0, $t2
	mflo $v0
	sub $t6, $t6, $v0
	sw $t5, 0($t6)
	li $v0,2

move $t5, $v0
	li $v0,9

# verifier l'indice 9
	bgez $v0, cmpt46
	li $v0, 4
	la $a0, error_indexTableau
	syscall
	j end
cmpt46: # tab est un tableau statique on recupere sa taille dans la TDS
	slti $t2, $v0, 10
	beq $t2, 1, cmpt47
	li $v0, 4
	la $a0, error_indexTableau
	syscall
	j end
cmpt47: # charger la valeur tab[9] du bloc 0
	la $t6, 0($s7)
	li $t2, 4
	mult $v0, $t2
	mflo $v0
	sub $t6, $t6, $v0
	sw $t5, 0($t6)
	addi $sp, $sp, -4
	jal fonction1
	addi $sp, $sp, 4
	# Affectarion de la valeur de tri() dans la variable trash du bloc numero : 0
	sw $v0, -40($s7)
	# stockage ok 
	
end :
move $v1, $v0
 li $v0, 10 
 syscall
# la fonction tri () avec  0 parametres
# l'empilement de l'adresse de retour de la fonction 
	fonction1: sw $ra, 0($sp)
	addi $sp, $sp, -4
	# l'empilement de l'ancienne base
	sw $s7, 0($sp)
	addi $sp, $sp, -4
	# l'empilement du numero de bloc (numero de region) 
	li $v0, 1
	sw $v0, ($sp)
	addi $sp, $sp, -4
	# chargement dans $s7 la nouvelle base
	move $s7, $sp
	addi $sp, $sp, -16
	# liste d'instructions de la fonction
	li $v0,1

# Affectarion de la valeur de 1 dans la variable i du bloc numero : 1
	sw $v0, 0($s7)
	# stockage ok 
	# debut boucle 2
tantque2: # on clacule l'expression (i < yal.arbre.Tableau.Longueur@2f0e140b)
	# la valeur de la variable i du bloc 1
	lw $v0, 0($s7)
	sw $v0, 0($sp)
	addi $sp, $sp, -4
	li $v0, 10
	addi $sp, $sp, 4
	lw $t8, 0($sp)
	slt $v0, $t8, $v0
# evaluation de la condition
beq $v0, 0, fintantque2
li $v0,0

# Affectarion de la valeur de 0 dans la variable j du bloc numero : 1
	sw $v0, -4($s7)
	# stockage ok 
	# debut boucle 1
tantque1: # on clacule l'expression (j < (yal.arbre.Tableau.Longueur@7440e464 - i))
	# la valeur de la variable j du bloc 1
	lw $v0, -4($s7)
	sw $v0, 0($sp)
	addi $sp, $sp, -4
	# on clacule l'expression (yal.arbre.Tableau.Longueur@7440e464 - i)
	li $v0, 10
	sw $v0, 0($sp)
	addi $sp, $sp, -4
	# la valeur de la variable i du bloc 1
	lw $v0, 0($s7)
	addi $sp, $sp, 4
	lw $t8, 0($sp)
	sub $v0, $t8, $v0 
addi $sp, $sp, 4
	lw $t8, 0($sp)
	slt $v0, $t8, $v0
# evaluation de la condition
beq $v0, 0, fintantque1
# debut condition1
# on clacule l'expression (tab[(j + 1)] < tab[j])
	# on clacule l'expression (j + 1)
	# la valeur de la variable j du bloc 1
	lw $v0, -4($s7)
	sw $v0, 0($sp)
	addi $sp, $sp, -4
	li $v0,1

addi $sp, $sp, 4
	lw $t8, 0($sp)
	add $v0, $t8, $v0 
# verifier l'indice (j + 1)
	bgez $v0, cmpt49
	li $v0, 4
	la $a0, error_indexTableau
	syscall
	j end
cmpt49: # tab est un tableau statique on recupere sa taille dans la TDS
	slti $t2, $v0, 10
	beq $t2, 1, cmpt50
	li $v0, 4
	la $a0, error_indexTableau
	syscall
	j end
cmpt50: # charger la valeur tab[(j + 1)] du bloc 0
	lw $t7, 4($s7)
	la $t6, 0($s7)
	chainageDynamique23: beqz $t7, finchainageDynamique23
	lw $t6, 8($t6)
	lw $t7, 4($t6)
	j chainageDynamique23
	finchainageDynamique23: la $t6, 0($t6)
	li $t2, 4
	mult $v0, $t2
	mflo $v0
	sub $t6, $t6, $v0
	lw $v0, ($t6)
	sw $v0, 0($sp)
	addi $sp, $sp, -4
	# la valeur de la variable j du bloc 1
	lw $v0, -4($s7)
	# verifier l'indice j
	bgez $v0, cmpt52
	li $v0, 4
	la $a0, error_indexTableau
	syscall
	j end
cmpt52: # tab est un tableau statique on recupere sa taille dans la TDS
	slti $t2, $v0, 10
	beq $t2, 1, cmpt53
	li $v0, 4
	la $a0, error_indexTableau
	syscall
	j end
cmpt53: # charger la valeur tab[j] du bloc 0
	lw $t7, 4($s7)
	la $t6, 0($s7)
	chainageDynamique26: beqz $t7, finchainageDynamique26
	lw $t6, 8($t6)
	lw $t7, 4($t6)
	j chainageDynamique26
	finchainageDynamique26: la $t6, 0($t6)
	li $t2, 4
	mult $v0, $t2
	mflo $v0
	sub $t6, $t6, $v0
	lw $v0, ($t6)
	addi $sp, $sp, 4
	lw $t8, 0($sp)
	slt $v0, $t8, $v0
si1: beq $v0, 0, sinon1
alors1: # on clacule l'expression (j + 1)
	# la valeur de la variable j du bloc 1
	lw $v0, -4($s7)
	sw $v0, 0($sp)
	addi $sp, $sp, -4
	li $v0,1

addi $sp, $sp, 4
	lw $t8, 0($sp)
	add $v0, $t8, $v0 
# verifier l'indice (j + 1)
	bgez $v0, cmpt55
	li $v0, 4
	la $a0, error_indexTableau
	syscall
	j end
cmpt55: # tab est un tableau statique on recupere sa taille dans la TDS
	slti $t2, $v0, 10
	beq $t2, 1, cmpt56
	li $v0, 4
	la $a0, error_indexTableau
	syscall
	j end
cmpt56: # charger la valeur tab[(j + 1)] du bloc 0
	lw $t7, 4($s7)
	la $t6, 0($s7)
	chainageDynamique29: beqz $t7, finchainageDynamique29
	lw $t6, 8($t6)
	lw $t7, 4($t6)
	j chainageDynamique29
	finchainageDynamique29: la $t6, 0($t6)
	li $t2, 4
	mult $v0, $t2
	mflo $v0
	sub $t6, $t6, $v0
	lw $v0, ($t6)
	# Affectarion de la valeur de tab[(j + 1)] dans la variable tmp du bloc numero : 1
	sw $v0, -8($s7)
	# stockage ok 
	# la valeur de la variable j du bloc 1
	lw $v0, -4($s7)
	# verifier l'indice j
	bgez $v0, cmpt58
	li $v0, 4
	la $a0, error_indexTableau
	syscall
	j end
cmpt58: # tab est un tableau statique on recupere sa taille dans la TDS
	slti $t2, $v0, 10
	beq $t2, 1, cmpt59
	li $v0, 4
	la $a0, error_indexTableau
	syscall
	j end
cmpt59: # charger la valeur tab[j] du bloc 0
	lw $t7, 4($s7)
	la $t6, 0($s7)
	chainageDynamique32: beqz $t7, finchainageDynamique32
	lw $t6, 8($t6)
	lw $t7, 4($t6)
	j chainageDynamique32
	finchainageDynamique32: la $t6, 0($t6)
	li $t2, 4
	mult $v0, $t2
	mflo $v0
	sub $t6, $t6, $v0
	lw $v0, ($t6)
	move $t5, $v0
	# on clacule l'expression (j + 1)
	# la valeur de la variable j du bloc 1
	lw $v0, -4($s7)
	sw $v0, 0($sp)
	addi $sp, $sp, -4
	li $v0,1

addi $sp, $sp, 4
	lw $t8, 0($sp)
	add $v0, $t8, $v0 
# verifier l'indice (j + 1)
	bgez $v0, cmpt61
	li $v0, 4
	la $a0, error_indexTableau
	syscall
	j end
cmpt61: # tab est un tableau statique on recupere sa taille dans la TDS
	slti $t2, $v0, 10
	beq $t2, 1, cmpt62
	li $v0, 4
	la $a0, error_indexTableau
	syscall
	j end
cmpt62: # charger la valeur tab[(j + 1)] du bloc 0
	lw $t7, 4($s7)
	la $t6, 0($s7)
	chainageDynamique35: beqz $t7, finchainageDynamique35
	lw $t6, 8($t6)
	lw $t7, 4($t6)
	j chainageDynamique35
	finchainageDynamique35: la $t6, 0($t6)
	li $t2, 4
	mult $v0, $t2
	mflo $v0
	sub $t6, $t6, $v0
	sw $t5, 0($t6)
	# la valeur de la variable tmp du bloc 1
	lw $v0, -8($s7)
	move $t5, $v0
	# la valeur de la variable j du bloc 1
	lw $v0, -4($s7)
	# verifier l'indice j
	bgez $v0, cmpt64
	li $v0, 4
	la $a0, error_indexTableau
	syscall
	j end
cmpt64: # tab est un tableau statique on recupere sa taille dans la TDS
	slti $t2, $v0, 10
	beq $t2, 1, cmpt65
	li $v0, 4
	la $a0, error_indexTableau
	syscall
	j end
cmpt65: # charger la valeur tab[j] du bloc 0
	lw $t7, 4($s7)
	la $t6, 0($s7)
	chainageDynamique38: beqz $t7, finchainageDynamique38
	lw $t6, 8($t6)
	lw $t7, 4($t6)
	j chainageDynamique38
	finchainageDynamique38: la $t6, 0($t6)
	li $t2, 4
	mult $v0, $t2
	mflo $v0
	sub $t6, $t6, $v0
	sw $t5, 0($t6)
	
j fsi1
sinon1: 
# fin condition1
fsi1: 
	# on clacule l'expression (j + 1)
	# la valeur de la variable j du bloc 1
	lw $v0, -4($s7)
	sw $v0, 0($sp)
	addi $sp, $sp, -4
	li $v0,1

addi $sp, $sp, 4
	lw $t8, 0($sp)
	add $v0, $t8, $v0 
# Affectarion de la valeur de (j + 1) dans la variable j du bloc numero : 1
	sw $v0, -4($s7)
	# stockage ok 
	j tantque1
# fin de la boucle 1
fintantque1:
# on clacule l'expression (i + 1)
	# la valeur de la variable i du bloc 1
	lw $v0, 0($s7)
	sw $v0, 0($sp)
	addi $sp, $sp, -4
	li $v0,1

addi $sp, $sp, 4
	lw $t8, 0($sp)
	add $v0, $t8, $v0 
# Affectarion de la valeur de (i + 1) dans la variable i du bloc numero : 1
	sw $v0, 0($s7)
	# stockage ok 
	j tantque2
# fin de la boucle 2
fintantque2:
# debut boucle 3
tantque3: # on clacule l'expression (cpt < yal.arbre.Tableau.Longueur@49476842)
	# la valeur de la variable cpt du bloc 1
	lw $v0, -12($s7)
	sw $v0, 0($sp)
	addi $sp, $sp, -4
	li $v0, 10
	addi $sp, $sp, 4
	lw $t8, 0($sp)
	slt $v0, $t8, $v0
# evaluation de la condition
beq $v0, 0, fintantque3
# affichichage de l'expression entiere : tab[cpt]
# la valeur de la variable cpt du bloc 1
	lw $v0, -12($s7)
	# verifier l'indice cpt
	bgez $v0, cmpt67
	li $v0, 4
	la $a0, error_indexTableau
	syscall
	j end
cmpt67: # tab est un tableau statique on recupere sa taille dans la TDS
	slti $t2, $v0, 10
	beq $t2, 1, cmpt68
	li $v0, 4
	la $a0, error_indexTableau
	syscall
	j end
cmpt68: # charger la valeur tab[cpt] du bloc 0
	lw $t7, 4($s7)
	la $t6, 0($s7)
	chainageDynamique42: beqz $t7, finchainageDynamique42
	lw $t6, 8($t6)
	lw $t7, 4($t6)
	j chainageDynamique42
	finchainageDynamique42: la $t6, 0($t6)
	li $t2, 4
	mult $v0, $t2
	mflo $v0
	sub $t6, $t6, $v0
	lw $v0, ($t6)
	move $t8, $v0
li $v0, 1
move $a0, $t8
syscall
li $v0, 4      # retour à la ligne
la $a0, finLigne
syscall
# on clacule l'expression (cpt + 1)
	# la valeur de la variable cpt du bloc 1
	lw $v0, -12($s7)
	sw $v0, 0($sp)
	addi $sp, $sp, -4
	li $v0,1

addi $sp, $sp, 4
	lw $t8, 0($sp)
	add $v0, $t8, $v0 
# Affectarion de la valeur de (cpt + 1) dans la variable cpt du bloc numero : 1
	sw $v0, -12($s7)
	# stockage ok 
	j tantque3
# fin de la boucle 3
fintantque3:
li $v0,0

# sauvegarde du resultat 0 dans son emplacement retour
	sw $v0, 16($s7)
	# dépilement des 4 variables locales
	addi $sp, $sp, 16
	addi $sp, $sp, 8
	lw $s7, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	jr $ra
	li $v0, 4
	la $a0, error_returnFonction
	syscall
	j end
 
 # la fonction affichage () avec  0 parametres
# l'empilement de l'adresse de retour de la fonction 
	fonction2: sw $ra, 0($sp)
	addi $sp, $sp, -4
	# l'empilement de l'ancienne base
	sw $s7, 0($sp)
	addi $sp, $sp, -4
	# l'empilement du numero de bloc (numero de region) 
	li $v0, 2
	sw $v0, ($sp)
	addi $sp, $sp, -4
	# chargement dans $s7 la nouvelle base
	move $s7, $sp
	addi $sp, $sp, -4
	# liste d'instructions de la fonction
	# debut boucle 4
tantque4: # on clacule l'expression (cpt < yal.arbre.Tableau.Longueur@78308db1)
	# la valeur de la variable cpt du bloc 2
	lw $v0, 0($s7)
	sw $v0, 0($sp)
	addi $sp, $sp, -4
	li $v0, 10
	addi $sp, $sp, 4
	lw $t8, 0($sp)
	slt $v0, $t8, $v0
# evaluation de la condition
beq $v0, 0, fintantque4
# affichichage de l'expression entiere : tab[cpt]
# la valeur de la variable cpt du bloc 2
	lw $v0, 0($s7)
	# verifier l'indice cpt
	bgez $v0, cmpt70
	li $v0, 4
	la $a0, error_indexTableau
	syscall
	j end
cmpt70: # tab est un tableau statique on recupere sa taille dans la TDS
	slti $t2, $v0, 10
	beq $t2, 1, cmpt71
	li $v0, 4
	la $a0, error_indexTableau
	syscall
	j end
cmpt71: # charger la valeur tab[cpt] du bloc 0
	lw $t7, 4($s7)
	la $t6, 0($s7)
	chainageDynamique46: beqz $t7, finchainageDynamique46
	lw $t6, 8($t6)
	lw $t7, 4($t6)
	j chainageDynamique46
	finchainageDynamique46: la $t6, 0($t6)
	li $t2, 4
	mult $v0, $t2
	mflo $v0
	sub $t6, $t6, $v0
	lw $v0, ($t6)
	move $t8, $v0
li $v0, 1
move $a0, $t8
syscall
li $v0, 4      # retour à la ligne
la $a0, finLigne
syscall
# on clacule l'expression (cpt + 1)
	# la valeur de la variable cpt du bloc 2
	lw $v0, 0($s7)
	sw $v0, 0($sp)
	addi $sp, $sp, -4
	li $v0,1

addi $sp, $sp, 4
	lw $t8, 0($sp)
	add $v0, $t8, $v0 
# Affectarion de la valeur de (cpt + 1) dans la variable cpt du bloc numero : 2
	sw $v0, 0($s7)
	# stockage ok 
	j tantque4
# fin de la boucle 4
fintantque4:
li $v0,0

# sauvegarde du resultat 0 dans son emplacement retour
	sw $v0, 16($s7)
	# dépilement des 1 variables locales
	addi $sp, $sp, 4
	addi $sp, $sp, 8
	lw $s7, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	jr $ra
	li $v0, 4
	la $a0, error_returnFonction
	syscall
	j end
 
 
