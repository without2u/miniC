.data
 finLigne:   .asciiz "\n"
              .align 2
vrai:	.asciiz "vrai"
faux:	.asciiz "faux"
error_div:	.asciiz "Erreur: Division par 0 !
.text
 main :
move $s7, $sp
addi $sp, $sp, -16
li $v0,10

sw $v0, 0($s7)
	li $v0,5

sw $v0, -4($s7)
	li $v0,6

sw $v0, -8($s7)
	li $v0,25

sw $v0, -12($s7)
	# affichichage de l'expression entiere : ((((a + (5 * c)) - (d / 5)) + a) - (c * a))
# on clacule l'expression ((((a + (5 * c)) - (d / 5)) + a) - (c * a))
	# on clacule l'expression (((a + (5 * c)) - (d / 5)) + a)
	# on clacule l'expression ((a + (5 * c)) - (d / 5))
	# on clacule l'expression (a + (5 * c))
	lw $v0, 0($s7)
sw $v0, 0($sp)
	addi $sp, $sp, -4
	# on clacule l'expression (5 * c)
	li $v0,5

sw $v0, 0($sp)
	addi $sp, $sp, -4
	lw $v0, -8($s7)
addi $sp, $sp, 4
	lw $t8, 0($sp)
	mult $v0, $t8 
mflo $v0 
addi $sp, $sp, 4
	lw $t8, 0($sp)
	add $v0, $t8, $v0 
sw $v0, 0($sp)
	addi $sp, $sp, -4
	# on clacule l'expression (d / 5)
	lw $v0, -12($s7)
sw $v0, 0($sp)
	addi $sp, $sp, -4
	li $v0,5

addi $sp, $sp, 4
	lw $t8, 0($sp)
	bne $v0, 0, division0
li $v0, 4
la $a0, error_div
syscall
j end
division0 : 
div $t8, $v0
mflo $v0
addi $sp, $sp, 4
	lw $t8, 0($sp)
	sub $v0, $t8, $v0 
sw $v0, 0($sp)
	addi $sp, $sp, -4
	lw $v0, 0($s7)
addi $sp, $sp, 4
	lw $t8, 0($sp)
	add $v0, $t8, $v0 
sw $v0, 0($sp)
	addi $sp, $sp, -4
	# on clacule l'expression (c * a)
	lw $v0, -8($s7)
sw $v0, 0($sp)
	addi $sp, $sp, -4
	lw $v0, 0($s7)
addi $sp, $sp, 4
	lw $t8, 0($sp)
	mult $v0, $t8 
mflo $v0 
addi $sp, $sp, 4
	lw $t8, 0($sp)
	sub $v0, $t8, $v0 
move $t8, $v0
li $v0, 1
move $a0, $t8
syscall
li $v0, 4      # retour à la ligne
la $a0, finLigne
syscall
# affichichage de l'expression entiere : ((((a + (5 * c)) - (d / 5)) + a) - (c * a))
# on clacule l'expression ((((a + (5 * c)) - (d / 5)) + a) - (c * a))
	# on clacule l'expression (((a + (5 * c)) - (d / 5)) + a)
	# on clacule l'expression ((a + (5 * c)) - (d / 5))
	# on clacule l'expression (a + (5 * c))
	lw $v0, 0($s7)
sw $v0, 0($sp)
	addi $sp, $sp, -4
	# on clacule l'expression (5 * c)
	li $v0,5

sw $v0, 0($sp)
	addi $sp, $sp, -4
	lw $v0, -8($s7)
addi $sp, $sp, 4
	lw $t8, 0($sp)
	mult $v0, $t8 
mflo $v0 
addi $sp, $sp, 4
	lw $t8, 0($sp)
	add $v0, $t8, $v0 
sw $v0, 0($sp)
	addi $sp, $sp, -4
	# on clacule l'expression (d / 5)
	lw $v0, -12($s7)
sw $v0, 0($sp)
	addi $sp, $sp, -4
	li $v0,5

addi $sp, $sp, 4
	lw $t8, 0($sp)
	bne $v0, 0, division1
li $v0, 4
la $a0, error_div
syscall
j end
division1 : 
div $t8, $v0
mflo $v0
addi $sp, $sp, 4
	lw $t8, 0($sp)
	sub $v0, $t8, $v0 
sw $v0, 0($sp)
	addi $sp, $sp, -4
	lw $v0, 0($s7)
addi $sp, $sp, 4
	lw $t8, 0($sp)
	add $v0, $t8, $v0 
sw $v0, 0($sp)
	addi $sp, $sp, -4
	# on clacule l'expression (c * a)
	lw $v0, -8($s7)
sw $v0, 0($sp)
	addi $sp, $sp, -4
	lw $v0, 0($s7)
addi $sp, $sp, 4
	lw $t8, 0($sp)
	mult $v0, $t8 
mflo $v0 
addi $sp, $sp, 4
	lw $t8, 0($sp)
	sub $v0, $t8, $v0 
move $t8, $v0
li $v0, 1
move $a0, $t8
syscall
li $v0, 4      # retour à la ligne
la $a0, finLigne
syscall

end :
move $v1, $v0
 li $v0, 10 
 syscall

