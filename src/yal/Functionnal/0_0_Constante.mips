.data
 finLigne:   .asciiz "\n"
              .align 2
vrai:	.asciiz "vrai"
faux:	.asciiz "faux"
error_div:	.asciiz "Erreur: Division par 0 !
erreurAccesTableauInvalide :
.text
 main :
move $s7, $sp
addi $sp, $sp, -4
# Empile le numéro de région
li $t8, 0
sw $t8, 0($sp)
addi $sp, $sp, -4

# Initialisation de la base des variables
move $s7, $sp

# Réservation de l'espace pour 1 variable(s)
addi $sp, $sp, -4

# Initialisation des variables
li $t8, 0
sw $t8, 0($s7)

# Déclaration du tableau t
# Stocke l'adresse de début du tableau
sw $sp, 0($s7)
# Place la valeur de la longueur dans $v0
li $v0,5

# Vérifie que la longueur est strictement supérieure à 0
blez $v0, erreurLongueurInvalide
# Stocke la longueur
sw $v0, 0($sp)
# Initialisation du tableau
tq_1 :
beqz $v0, fintq_1
addi $v0, $v0, -1
addi $sp, $sp, -4
sw $zero, 0($sp)
j tq_1
fintq_1 :
addi $sp, $sp, -4
 
 li $v0,0

# stockage de la valeur de 0 dans la variable b du bloc numero : 0
	sw $v0, -4($s7)
	# stockage ok 
	# debut condition1
# on clacule l'expression (b < 5)
	# chargement de la variable  b du bloc 0
	lw $v0, -4($s7)
	sw $v0, 0($sp)
	addi $sp, $sp, -4
	li $v0,5

addi $sp, $sp, 4
	lw $t8, 0($sp)
	slt $v0, $t8, $v0
si1: beq $v0, 0, sinon1
alors1: # affichichage de l'expression entiere : b
# chargement de la variable  b du bloc 0
	lw $v0, -4($s7)
	move $t8, $v0
li $v0, 1
move $a0, $t8
syscall
li $v0, 4      # retour à la ligne
la $a0, finLigne
syscall

j fsi1
sinon1: 
# fin condition1
fsi1: 
	
end :
move $v1, $v0
 li $v0, 10 
 syscall

