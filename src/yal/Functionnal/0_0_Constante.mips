.data
 finLigne:   .asciiz "\n"
              .align 2
vrai:	.asciiz "vrai"
faux:	.asciiz "faux"
error_div:	.asciiz "Erreur: Division par 0 !
.text
 main :
move $s7, $sp
# affichichage de l'expression entiere : a(4)
addi $sp, $sp, -4
	li $v0,4

sw $v0, 0($sp)
	addi $sp, $sp, -4
	jal fonction1
	addi $sp, $sp, 4
	addi $sp, $sp, 4
	move $t8, $v0
li $v0, 1
move $a0, $t8
syscall
li $v0, 4      # retour à la ligne
la $a0, finLigne
syscall

end :
move $v1, $v0
 li $v0, 10 
 syscall
# la fonction a () elle a  1 parametres
# l'empilement de l'adresse de retour de la fonction 
	fonction1: sw $ra, 0($sp)
	addi $sp, $sp, -4
	# l'empilement de l'ancienne base
	sw $s7, 0($sp)
	addi $sp, $sp, -4
	# l'empilement du numero de region 
	li $v0, 1
	sw $v0, ($sp)
	addi $sp, $sp, -4
	# chargement dans $s7 la nouvelle base
	move $s7, $sp
	addi $sp, $sp, -4
	# l'empilement des arguments de la fonction
	la $t8, 16($s7)
	lw $v0, 0($t8)
	sw $v0, 0($s7)
	# liste d'instructions de la fonction
	# on clacule l'expression (10 - (b * 3))
	li $v0,10

sw $v0, 0($sp)
	addi $sp, $sp, -4
	# on clacule l'expression (b * 3)
	# chargement de la variable b du bloc 1
	lw $t8, 8($s7)
	lw $v0, 0($t8)
	sw $v0, 0($sp)
	addi $sp, $sp, -4
	li $v0,3

addi $sp, $sp, 4
	lw $t8, 0($sp)
	mult $v0, $t8 
mflo $v0 
addi $sp, $sp, 4
	lw $t8, 0($sp)
	sub $v0, $t8, $v0 
# sauvegardement du resultat (10 - (b * 3))
	sw $v0, 20($s7)
	# dépilement des variables locales de fonction 
	addi $sp, $sp, 4
	addi $sp, $sp, 8
	lw $s7, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	jr $ra
	 
 
