package yal.analyse ;

import java.util.*;
import yal.arbre.* ;
import yal.table.*;
import yal.arbre.expressions.* ;
import yal.arbre.instructions.* ;
import yal.exceptions.AnalyseSyntaxiqueException;

import java_cup.runtime.*;

action code {:
             :} ;

parser code {:

    public void report_error(String message, Object info) {

        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;

        lesTerminaux.put(new Integer(CodesLexicaux.DEBUT), "debut") ;
        lesTerminaux.put(new Integer(CodesLexicaux.FIN), "fin") ;
        lesTerminaux.put(new Integer(CodesLexicaux.POINTVIRGULE), ";") ;

        StringBuffer m = new StringBuffer() ;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append("\tligne : " + (s.left + 1)) ;
                if (s.right >= 0)
                    m.append(" colonne : " + (s.right+1)) ;
            }

            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CSTENTIERE, "" + s.value) ;
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym))) ;
            }
            else {
                m.append(" expression non termin√©e") ;
            }

        }
        throw new AnalyseSyntaxiqueException("" + m) ;
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
:};

/* ------------Declaration of Terminals and Non Terminals Section----------- */

/* Terminals (tokens returned by the scanner).  */

terminal Symbol    PROGRAMME, DEBUT, FIN, POINTVIRGULE, LIRE, EGAL, ENTIER, ECRIRE;
terminal String    IDF, CSTENTIERE, TYPE ;

/* Non terminals used in the grammar section.  */

non terminal ArbreAbstrait PROG;
non terminal Expression EXP ;
non terminal BlocDInstructions LINST, LDECL;
non terminal Identificateur DECL, DECL_VAR;
non terminal Instruction AFFECT, INST,LECTURE;



/* ----------------------------Grammar Section-------------------- */

start with PROG ;

PROG    ::=     PROGRAMME  IDF:idf  DEBUT  LINST:li  FIN
                {:
                    Programme p = new Programme(idf,idfleft);
                    p.ajouterBloc(li);
                    RESULT = p;
                :}

        |
                PROGRAMME IDF:idf DEBUT LDECL:ld LINST:li FIN
                {:
                    Programme p = new Programme(idf,idfleft);
                    p.ajouterBloc(ld);
                    p.ajouterBloc(li);
                    RESULT = p;
                :}

        ;

LINST   ::=     LINST:li  INST:i
                {:
                    ((BlocDInstructions)li).ajouter(i) ;
                     RESULT = li ; :}
        |
                INST:i
                {:
                    BlocDInstructions b = new BlocDInstructions(ileft + 1) ;
                    b.ajouter(i) ;
                    RESULT = b ;
                :}
        ;

INST    ::=     ECRIRE EXP:e POINTVIRGULE
                {:
                    RESULT = new Ecrire(e, eleft + 1) ;
                :}

        |
                LECTURE:l
                {:
                    RESULT = l ;
                :}

        |
                AFFECT:aff
                {:
                    RESULT = aff;
                :}
        ;

EXP    ::=     CSTENTIERE:c
                {:
                    RESULT = new ConstanteEntiere(c, cleft + 1) ;
                :}
        |
                IDF:idf
                {:
                    RESULT = new Identificateur(idf, idfleft+1);
                :}
        ;

AFFECT		::=	    IDF:idf EGAL EXP:e POINTVIRGULE
					{:
					    Identificateur i = new Identificateur(idf, idfleft+1);
					    Instruction aff = new AffectationVariable(i, e, idfleft+1);
					    RESULT = aff;
					:}

			;

LDECL		::=		LDECL:ld DECL:d
					{:
                        ld.ajouter(d);
                        RESULT = ld;
					:}
			|
					DECL:d
						{:	BlocDInstructions bloc = new BlocDInstructions(dleft+1);
							bloc.ajouter(d);
							RESULT = bloc;
						:}
				;


DECL		::=		DECL_VAR:dv
						{: RESULT = dv; :}
				;


DECL_VAR		::=		ENTIER IDF:idf POINTVIRGULE
						{: 	Entree e = new Entree(idf);
							Type type = Type.ENTIER;
							Symbole s = new Symbole(type);
							Tds.getInstance().ajouter(e,s,idfleft+1);
							Identificateur id = new Identificateur(idf,idfleft);
							RESULT = id;
						:}
				;
LECTURE     ::=     LIRE IDF:idf POINTVIRGULE
                    {: Identificateur id = new Identificateur(idf, idfleft + 1);
                        Instruction l = new Lire(id, idfleft + 1);
                        RESULT = l;
                    :}
                    ;